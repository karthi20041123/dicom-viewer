version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: dicom_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: Newpasswojack2004
      MONGO_INITDB_DATABASE: dicom_db
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - dicom_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/dicom_db --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dicom_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb+srv://jacksparrowd:Newpasswojack2004@pacs.mtj0dro.mongodb.net/PACS?retryWrites=true&w=majority
      JWT_SECRET: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NSIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTcyNzAyNzkyMiwiZXhwIjoxNzI3MDMxNTIyfQ.m6pLsoZ7Hq4h3D7vN9sMh_VUQ8ZdzrEk4OYYZrEJcQA
      EMAIL_USER: jacksparrowd492@gmail.com
      EMAIL_PASS: mjmo wrdn grji pqhb
    volumes:
      - dicom_uploads:/app/Uploads
      - backend_logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - dicom_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dicom_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - dicom_network
    volumes:
      - frontend_build:/app/build

  # Nginx Reverse Proxy (Optional but recommended)
  nginx:
    image: nginx:alpine
    container_name: dicom_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - dicom_uploads:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    networks:
      - dicom_network

volumes:
  mongodb_data:
    driver: local
  dicom_uploads:
    driver: local
  backend_logs:
    driver: local
  frontend_build:
    driver: local

networks:
  dicom_network:
    driver: bridge